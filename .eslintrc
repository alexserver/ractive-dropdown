{
  //
  // `ecmaFeatures` are not supported by `babel-eslint` parser so
  // babel-eslint parser is removed
  //  https://github.com/babel/babel-eslint/issues/53#issuecomment-83060566
  //
  "ecmaFeatures": {
    "arrowFunctions"                   : true,  // enable arrow functions
    "binaryLiterals"                   : false, // enable binary literals
    "blockBindings"                    : true,  // enable let and const (aka block bindings)
    "classes"                          : true,  // enable classes
    "defaultParams"                    : true,  // enable default function parameters
    "destructuring"                    : true,  // enable destructuring
    "forOf"                            : true,  // enable for-of loops
    "generators"                       : true,  // enable generators
    "modules"                          : true,  // enable modules and global strict mode
    "objectLiteralComputedProperties"  : true,  // enable computed object literal property names
    "objectLiteralDuplicateProperties" : false, // enable duplicate object literal properties in strict mode
    "objectLiteralShorthandMethods"    : true,  // enable object literal shorthand methods
    "objectLiteralShorthandProperties" : true,  // enable object literal shorthand properties
    "octalLiterals"                    : false, // enable octal literals
    "regexUFlag"                       : true,  // enable the regular expression u flag
    "regexYFlag"                       : true,  // enable the regular expression y flag
    "restParams"                       : true,  // enable the rest parameters
    "spread"                           : true,  // enable the spread operator
    "superInFunctions"                 : true,  // enable super references inside of functions
    "templateStrings"                  : true,  // enable template strings
    "unicodeCodePointEscapes"          : false, // enable code point escapes
    "globalReturn"                     : false, // allow return statements in the global scope
    "jsx"                              : true   // enable JSX
  },

  "env": {
    "browser"     : true,  // browser global variables.
    "node"        : true,  // Node.js global variables and Node.js-specific rules.
    "amd"         : false, // defines require() and define() as global variables as per the amd spec.
    "mocha"       : true,  // adds all of the Mocha testing global variables.
    "jasmine"     : false, // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    "phantomjs"   : false, // phantomjs global variables.
    "jquery"      : false, // jquery global variables.
    "prototypejs" : false, // prototypejs global variables.
    "shelljs"     : false, // shelljs global variables.
    "es6"         : false,  // es6 environment
  },

  "globals": {
    // for unit tests
    "chai": false,
    "sinon": false,
  },

  //
  // http://eslint.org/docs/rules/
  //
  // 0 - turn the rule off
  // 1 - turn the rule on as a warning (doesn't affect exit code)
  // 2 - turn the rule on as an error (exit code is 1 when triggered)
  //
  "rules": {
    ////////// Possible Errors //////////

    // disallow trailing commas in object literals
    // turned off
    "comma-dangle": [0, "always-multiline"],

    // disallow assignment in conditional expressions
    "no-cond-assign": [2, "except-parens"],

    // disallow use of console (off by default in the node environment)
    "no-console": 0,

    // disallow use of constant expressions in conditions
    "no-constant-condition": 1,

    // disallow control characters in regular expressions
    "no-control-regex": 1,

    // disallow use of debugger
    "no-debugger": 0,

    // disallow duplicate arguments in functions
    "no-dupe-args": 0, // we already in strict mode, so disable the rule

    // disallow duplicate keys when creating object literals
    "no-dupe-keys": 2,

    // disallow a duplicate case label
    "no-duplicate-case": 2,

    // disallow the use of empty character classes in regular expressions
    "no-empty-character-class": 2,

    // disallow empty statements
    "no-empty": 2,

    // disallow assigning to the exception in a catch block
    "no-ex-assign": 1,

    // disallow double-negation boolean casts in a boolean context
    "no-extra-boolean-cast": 1,

    // disallow unnecessary parentheses (off by default)
    "no-extra-parens": 0, // JSX statements are often wrapped in parentheses

    // disallow unnecessary semicolons
    "no-extra-semi": 2,

    // disallow overwriting functions written as function declarations
    "no-func-assign": 2,

    // disallow function or variable declarations in nested blocks
    "no-inner-declarations": [2, "both"],

    // disallow invalid regular expression strings in the RegExp constructor
    "no-invalid-regexp": 1,

    // disallow irregular whitespace outside of strings and comments
    "no-irregular-whitespace": 1,

    // disallow negation of the left operand of an in expression
    "no-negated-in-lhs": 1,

    // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-obj-calls": 2,

    // disallow multiple spaces in a regular expression literal
    "no-regex-spaces": 2,

    // disallow reserved words being used as object literal keys (off by default)
    "no-reserved-keys": 0, // disalbed because we are not supporting ECMAScript 3

    // disallow sparse arrays
    "no-sparse-arrays": 2,

    // disallow unreachable statements after a return, throw, continue, or break statement
    "no-unreachable": 1,

    // disallow comparisons with the value NaN
    "use-isnan": 2,

    // Ensure JSDoc comments are valid (off by default)
    "valid-jsdoc": [2, {
      "requireReturn": true,
      "requireParamDescription": false,
      "requireReturnDescription": false,
      "prefer": {
        "return": "returns"
      }
    }],

    // Ensure that the results of typeof are compared against a valid string
    "valid-typeof": 1,

    // Avoid code that looks like two expressions but is actually one (off by default)
    // TODO uncomment when gulp-eslint will support eslint 0.24
    // "no-unexpected-multiline": 1,

    ////////// Best Practices //////////

    // Enforces getter/setter pairs in objects (off by default)
    "accessor-pairs": 1,

    // treat var statements as if they were block scoped (off by default)
    "block-scoped-var": 0,

    // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "complexity": 0,

    // require return statements to either always or never specify values
    "consistent-return": 1,

    // specify curly brace conventions for all control statements
    "curly": [2, "multi-line"],

    // require default case in switch statements (off by default)
    "default-case": 2,

    // encourages use of dot notation whenever possible
    "dot-notation": [2,
      // allow to use snake-case properties in square-bracket notation (foo["baz_bar"])
      {"allowPattern": "^[a-z]+(_[a-z]+)+$"}
    ],

    // enforces consistent newlines before or after dots (off by default)
    "dot-location": [2, "property"],

    // require the use of === and !==
    "eqeqeq": 2,

    // make sure for-in loops have an if statement (off by default)
    "guard-for-in": 0,

    // disallow the use of alert, confirm, and prompt
    "no-alert": 0, // disabled because we are never use alert anyway!

    // disallow use of arguments.caller or arguments.callee
    "no-caller": 2,

    // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-div-regex": 1,

    // disallow else after a return in an if (off by default)
    "no-else-return": 0,

    // disallow use of labels for anything other then loops and switches
    "no-empty-label": 0,

    // disallow comparisons to null without a type-checking operator (off by default)
    "no-eq-null": 0, // overlaps with eqeqeq rule

    // disallow use of eval()
    "no-eval": 0, // disabled because if somebody uses eval there is a reason for it

    // disallow adding to native types
    "no-extend-native": 2,

    // disallow unnecessary function binding
    "no-extra-bind": 1,

    // disallow fallthrough of case statements
    "no-fallthrough": 1,

    // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-floating-decimal": 0,

    // disallow use of eval()-like methods
    "no-implied-eval": 1,

    // disallow usage of __iterator__ property
    "no-iterator": 2,

    // disallow use of labeled statements
    "no-labels": 2,

    // disallow unnecessary nested blocks
    "no-lone-blocks": 2,

    // disallow creation of functions within loops
    "no-loop-func": 2,

    // disallow use of multiple spaces
    "no-multi-spaces": 2,

    // disallow use of multiline strings
    "no-multi-str": 2,

    // disallow reassignments of native objects
    "no-native-reassign": 2,

    // disallow use of new operator for Function object
    "no-new-func": 2,

    // disallows creating new instances of String, Number, and Boolean
    "no-new-wrappers": 2,

    // disallow use of new operator when not part of the assignment or comparison
    "no-new": 2,

    // disallow use of octal literals
    "no-octal": 2,

    // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-octal-escape": 2,

    // disallow reassignment of function parameters (off by default)
    "no-param-reassign": 2,

    // disallow use of process.env (off by default)
    "no-process-env": 1,

    // disallow usage of __proto__ property
    "no-proto": 2,

    // disallow declaring the same variable more then once
    "no-redeclare": 1,

    // disallow use of assignment in return statement
    "no-return-assign": 1,

    // disallow use of javascript: urls.
    "no-script-url": 2,

    // disallow comparisons where both sides are exactly the same (off by default)
    "no-self-compare": 2,

    // disallow use of comma operator
    "no-sequences": 2,

    // restrict what can be thrown as an exception (off by default)
    "no-throw-literal": 2,

    // disallow usage of expressions in statement position
    "no-unused-expressions": 2,

    // disallow use of void operator (off by default)
    "no-void": 2,

    // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-warning-comments": 0,

    // disallow use of the with statement
    "no-with": 2,

    // require use of the second argument for parseInt() (off by default)
    "radix": 0,

    // requires to declare all vars on top of their containing scope (off by default)
    "vars-on-top": 1,

    // require immediate function invocation to be wrapped in parentheses (off by default)
    "wrap-iife": [2, "inside"],

    // require or disallow Yoda conditions
    "yoda": [2, "never", { "exceptRange": true }],


    ////////// Strict Mode //////////

    // controls location of Use Strict Directives
    "strict": 0, // we are using `modules` feature and they are strict by default


    ////////// Variables //////////

    // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-catch-shadow": 0, // turned off because we did’t support IE8

    // disallow deletion of variables
    "no-delete-var": 1,

    // disallow labels that share a name with a variable
    "no-label-var": 2,

    // disallow declaration of variables already declared in the outer scope
    "no-shadow": 2,

    // disallow shadowing of names such as arguments
    "no-shadow-restricted-names": 2,

    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef": 1,

    // disallow use of undefined when initializing variables
    "no-undef-init": 1,

    // disallow use of undefined variable (off by default)
    "no-undefined": 0,

    // disallow declaration of variables that are not used in the code
    "no-unused-vars": [2, {"vars": "all", "args": "after-used"}],

    // disallow use of variables before they are defined
    "no-use-before-define": 0,


    ////////// Node.js //////////

    // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "handle-callback-err": 2,

    // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-mixed-requires": 0,
    //
    // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-new-require": 1,

    // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-path-concat": 2,

    // disallow process.exit() (on by default in the node environment)
    "no-process-exit": 2,

    // restrict usage of specified node modules (off by default)
    "no-restricted-modules": 0,

    // disallow use of synchronous methods (off by default)
    "no-sync": 0,


    ////////// Stylistic Issues //////////

    // ensures proper spacing of array literal brackets
    // TODO: uncomment and setup when gulp-eslint will support eslint 0.24
    // "array-bracket-spacing": 0,

    // enforce one true brace style (off by default)
    "brace-style": [2, "1tbs", { "allowSingleLine": true }],

    // require camel case names
    "camelcase": [2, {"properties": "always"}],

    // enforce spacing before and after comma
    "comma-spacing": [2, {"before": false, "after": true}],

    // enforce one true comma style (off by default)
    "comma-style": 2,

    // require or disallow padding inside computed properties (off by default)
    "computed-property-spacing": [2, "never"],

    // enforces consistent naming when capturing the current execution context (off by default)
    "consistent-this": [2, "self"],

    // enforce newline at the end of file, with no multiple empty lines
    "eol-last": 0,

    // require function expressions to have a name (off by default)
    "func-names": 0,

    // enforces use of function declarations or expressions (off by default)
    // Turned off because of lack of the support of the arrow functions
    "func-style": [0, "declaration"],

    // this option sets a specific tab width for your code (off by default)
    "indent": [2, 2, {"indentSwitchCase": true}],

    // enforces spacing between keys and values in object literal properties
    "key-spacing": [2, {"beforeColon": false, "afterColon": true}],

    // enforces empty lines around comments (off by default)
    "lines-around-comment": 0,

    // disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
    "linebreak-style": [2, "unix"],

    // specify the maximum depth callbacks can be nested (off by default)
    "max-nested-callbacks": 0,

    // require a capital letter for constructors
    "new-cap": [2, {
      "newIsCap": true,
      "capIsNew": true,
      // Immutable.js classes
      "capIsNewExceptions": [
        "List",
        "Map",
        "Repeat"]
    }],

    // disallow the omission of parentheses when invoking a constructor with no arguments
    "new-parens": 2,

    // allow/disallow an empty newline after var statement (off by default)
    "newline-after-var": 0,

    // disallow use of the Array constructor
    "no-array-constructor": 2,

    // disallow use of the continue statement (off by default)
    "no-continue": 0,

    // disallow comments inline after code (off by default)
    "no-inline-comments": 0,

    // disallow if as the only statement in an else block (off by default)
    "no-lonely-if": 2,

    // disallow mixed spaces and tabs for indentation
    "no-mixed-spaces-and-tabs": 2,

    // disallow multiple empty lines (off by default)
    "no-multiple-empty-lines": [2, {"max": 3}],

    // disallow nested ternary expressions (off by default)
    "no-nested-ternary": 2,

    // disallow use of the Object constructor
    "no-new-object": 2,

    // disallow space between function identifier and application
    "no-spaced-func": 2,

    // disallow the use of ternary operators (off by default)
    "no-ternary": 0,

    // disallow trailing whitespace at the end of lines
    "no-trailing-spaces": 2,

    // disallow dangling underscores in identifiers
    "no-underscore-dangle": 0,

    // disallow the use of Boolean literals in conditional expressions (off by default)
    "no-unneeded-ternary": 2,

    // require or disallow padding inside curly braces (off by default)
    "object-curly-spacing": 0,

    // allow just one var statement per function (off by default)
    "one-var": [2, {
      "uninitialized": "always", // Exactly one declaration for uninitialized variables per function (var) or block (let or const)
      "initialized": "never" // Exactly one declarator per initialized variable declaration per function (var) or block (let or const)
    }],

    // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-assignment": 0,

    // enforce operators to be placed before or after line breaks (off by default)
    "operator-linebreak": [1, "after"],

    // enforce padding within blocks (off by default)
    "padded-blocks": 0,

    // require quotes around object literal property names (off by default)
    "quote-props": [2, "as-needed"],

    // specify whether double or single quotes should be used
    "quotes": [2, "single", "avoid-escape"],

    // enforce spacing before and after semicolons
    "semi-spacing": [2, {"before": false, "after": true}],

    // require or disallow use of semicolons instead of ASI
    "semi": [2, "always"],

    // sort variables within the same declaration block (off by default)
    "sort-vars": 0,

    // require a space after certain keywords (off by default)
    "space-after-keywords": [2, "always"],

    // require or disallow space before blocks (off by default)
    "space-before-blocks": [2, "always"],

    // require or disallow space before function opening parenthesis (off by default)
    "space-before-function-paren": [2, "never"],

    // require or disallow spaces inside parentheses (off by default)
    "space-in-parens": [2, "never"],

    // require spaces around operators
    "space-infix-ops": [2, {"int32Hint": true}],

    // require a space after return, throw, and case
    "space-return-throw-case": 2,

    // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "space-unary-ops": [2, {"words": true, "nonwords": false}],

    // require or disallow a space immediately following the // or /* in a comment (off by default)
    // TODO: uncomment this when gulp-eslint will support eslint 0.24
    // "spaced-comment":[1, "always", {"exceptions": ["-", "+"]}],

    // require regex literals to be wrapped in parentheses (off by default)
    "wrap-regex": 0,


    ////////// ECMAScript 6 //////////

    // verify super() callings in constructors (off by default)
    // TODO: uncomment this when gulp-eslint will support eslint 0.24
    // "constructor-super": 1,

    // enforce the spacing around the * in generator functions (off by default)
    // TODO: uncomment this when gulp-eslint will support eslint 0.24
    // "generator-star-spacing": [2, {"before": false, "after": true}],

    // disallow to use this/super before super() calling in constructors. (off by default)
    // TODO: uncomment this when gulp-eslint will support eslint 0.24
    // "no-this-before-super": 2,

    // require let or const instead of var (off by default)
    "no-var": 0,

    // require method and property shorthand syntax for object literals (off by default)
    "object-shorthand": [2, "never"],

    // suggest using of const declaration for variables that are never modified after declared (off by default)
    "prefer-const": 2,


    ////////// Legacy //////////

    // specify the maximum depth that blocks can be nested (off by default)
    "max-depth": 0,

    // specify the maximum length of a line in your program (off by default)
    "max-len": [1, 90, 4],

    // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-params": [0, 3],

    // specify the maximum number of statement allowed in a function (off by default)
    "max-statements": 0,

    // disallow use of bitwise operators (off by default)
    "no-bitwise": 0,

    // disallow use of unary operators, ++ and -- (off by default)
    "no-plusplus": 0
  }
}
